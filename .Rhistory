z[c("b","d","e")]
z[2:4]
q<- seq_len(100)
q[q%%9==0]
install.packages("devtools")
install_github("thomasp85/patchwork")
install.packages("devtools")
library(devtools)
install_github("thomasp85/patchwork")
x=1.1
x=1.1
a=2.2
b=3.3
x^(a^b)
x^a^b
(x^a)^b
3x^3 + 2x^2 + 1
(3x^3) + 2x^2 + 1
3*x^3 + 2x^2 + 1
3*x^3 + 2*x^2 + 1
x^a^b <- z
z <- x^a^b
print(z)
z <- (x^a)^b
print(z)
z <- 3*x^3 + 2*x^2 + 1
print(z)
floor(z)
x=1.1
a=2.2
b=3.3
z <- x^a^b
print(z)
z <- (x^a)^b
print(z)
z <- 3*x^3 + 2*x^2 + 1
print(z)
floor(z)
rep("mystring",3)
rep(x=0.5,times=6)
rep(times=6,x=0.5)
myVec <- c(1,2,3)
rep(myVec,times=2)
myVector <- c(1:8,8:1)
myVector
rep(x=myVec,each=2)
rep(x=myVec,times=myVec)
myVector2 <- c(1:5)
rep(x=myVector2,times=1:5)
myVector3 <- (5:1)
seq(from=2,to=4)
seq(from=2,to=4,by=0.5)
seq(from=2,to=4,length=7)
x <- seq(from=2,to=4,length=7)
1:x
1:length(x)
seq_along(x) #better than previous line
1:5
seq(1:5)
seq_len(10)
x<-vector(mode="numeric",length=0)
str(x)
1:length(x)
seq_along(x)
runif(1)
set.seed(100)
runif(1)
runif(n=5,min=100,max=200)
library(ggplot2) #graphics library
z<-runif(1000,min=30,max=300)
qplot(x=z)
z <- rnorm(1000)
qplot(x=z)
rep(times=6,x=0.5)
myVec <- c(1,2,3)
rep(myVec,times=2)
rep(x=myVec,each=2)
rep(x=myVec,times=myVec)
rep(x=1:3,times=3:1)
rep(x=myVector3,times=1:5)
runif(1)
runif(2)
VectorRandom <- runif(2)
VectorRandom
VectorRandom
VectorRandom
VectorRandom
VectorRandom
asin(VectorRandom)
atan(VectorRandom)
VectorRandom <- runif(2)
VectorRandom
atan(VectorRandom)
acos(VectorRandom)
VectorRandom <- runif(2,min=1,max=360)
VectorRandom
acos(VectorRandom)
atan(VectorRandom)
VectorRandom <- runif(2,min=1,max=360)
atan(VectorRandom)
VectorRandom
atan(VectorRandom)
asin(VectorRandom)
asin(VectorRandom)
acos(VectorRandom)
atan(VectorRandom)
queue <- c("sheep", "fox", "owl", "ant")
z<-c("this is only 'one' character strong",'a second string')
str(z)
z<- runif(5) #random uniform (0,1)
names(z)
names(z)<- c("chow","pug","beagle","greyhound","akita")
print(z)
z2<-c(gold=3.3,silver=10,lead=2)
print(z2)
names(z2) <- NULL
print(z2)
names(z2)<- c("copper","zinc")
print(z2)
z <- 3*x^3 + 2*x^2 + 1
print(z)
x=1.1
a=2.2
b=3.3
z <- x^a^b
print(z)
z <- (x^a)^b
print(z)
z <- 3*x^3 + 2*x^2 + 1
print(z)
floor(z)
floor(z-7)
floor(z)
trunk(z)
floor(z)
print(floor(10*(z)))
print(floor(10*(z)))
print(floor(10*(z))))
print(trunc(10*(z)))
print(trunc(10*floor(z)))
print(trunc(10*floor-(z)))
print(floor(10*floor(z)))
print(floor(10-floor(z)))
z <- 3*x^3 + 2*x^2 + 1
print(z)
print(floor(10-floor(z)))
print(floor(10*(-floor(z))))
print(%z%
```
print(%z%)
print(%%z)
print(floor(7*floor(z)))
print(floor(10*floor(z)))
z<- runif(5) #random uniform (0,1)
names(z)
names(queue)
queue <- c("sheep", "fox", "owl", "ant")
names(queue)
queue <- c("sheep", "fox", "owl", "ant","serpent")
queue
queue <- (2:5)
queue
queue <- names(2:5)
queue
a<-c(2.1,2.2)
typeof(a)
b<-c("purple","green")
typeof(b)
d<-c(a,b)
print(d)
z<-vector(mode="numeric",length=0)
print(z)
MyVector <- runif(100) # get 100 random uniform values
myNames <- paste("File",seq(1:length(MyVector)),".txt",sep="")
head(myNames)
names(MyVector) <- myNames
head(MyVector)
rep("mystring",3)
rep(x=0.5,times=6)
rep(times=6,x=0.5)
myVec <- c(1,2,3)
rep(myVec,times=2)
rep(x=myVec,each=2)
rep(x=myVec,times=myVec)
rep(x=1:3,times=3:1)
longVec<- seq_len(10)
longVec
sample(x=longVec)
sample(x=longVec,size=3) #sample without replacement
sample(x=longVec,size=3,replace = TRUE)
myWeights<- c(rep(20,5),rep(100,5))
sample(x=longVec,replace=T,prob = myWeights)
sample(x=longVec,replace=F,prob = myWeights)
myWeights
myWeights<- c(rep(20,5),rep(100,5))
z<-c(3.1,9.2,1.3,0.4,7.5)
z[2]
z[c(2,3)]
z[2:3]
z[-c(2,3)]
z<3 #just gives index values
z[z<3] #gives actual values
which(z<3)
myCriteria<-z<3
z[myCriteria]
z[which(z<3)]
zx<-c(NA,z)
zx[zx<3] #missing values retained
zx[which(zx<3)] #missing values dropped
z[] #prints entire vector
z[-(length(z):(length(z)-2))]
z
names(z) <- letters[seq_along(z)]
z
z
z[] #prints entire vector
z[-(length(z):(length(z)-2))]
z[-(length(z):(length(z)-2))]
queue
queue <- c("sheep", "fox", "owl", "ant")
print(queue)
queue
z
names(z) <- letters[seq_along(z)]
z
names(z) <- letters[seq_along(z)]
z
z[c("b","d","e")]
queue <- c("sheep", "fox", "owl", "ant","serpent")
queue
queue[2:5]
print(queue)
queue <- c(2:5)
print(queue)
queue[2:5]
print(queue)
queue <- c("sheep", "fox", "owl", "ant","serpent")
queue[2:5]
names(z) <- letters[seq_along(z)]
z
z[c("b","d","e")]
queue[c(2:5)]
queue[c("donkey",1:5)]
queue[c("donkey",1:5)]
queue
queue[c(2:5)]
print(queue[c("donkey",1:5)])
print(queue[c(2:5)])
print(queue[c("donkey",1:5)])
print(queue[c("donkey",2:6)])
print(queue[c("donkey",1:5)])
print(queue[c(2:5)])
print(queue[c("donkey",1:5)])
queue[1]
queue[1]<-"donkey"
queue
print(queue[c("donkey",1:5)])
queue[1]<-"donkey"
print(queue)
print(queue[1:5])
print(queue[1:5])
print(queue[1:4])
print(queue[c(1,2,4,5)]
```
xy <- runif(2,min=1,max=360)
xy
xy <- runif(2,min=1,max=360)
x <- xy*cos(theta)
y <- xy*sin(theta)
print(theta)
print(xy)
queue <- c("sheep", "fox", "owl", "ant")
queue <- c("sheep", "fox", "owl", "ant","serpent")
print(queue[c(2:5)])
queue[1]<-"donkey"
print(queue)
print(queue[1:4])
print(queue[1:4])
print(queue[1,2,4]
```
queue[3] <- NA
queue
z[] #prints entire vector
z[-(length(z):(length(z)-2))]
z
names(z) <- letters[seq_along(z)]
z
z[c("b","d","e")]
print(queue[c("sheep","fox","ant","serpent")
```
print(queue[1:4])
queue <- c("sheep", "fox", "owl", "ant")
queue <- c("sheep", "fox", "owl", "ant","serpent")
queue
print(queue[c(2:5)])
queue[1]<-"donkey"
print(queue)
queue[1]<-"donkey"
print(queue)
queue <- c("sheep", "fox", "owl", "ant")
queue <- c("sheep", "fox", "owl", "ant","serpent")
print(queue[c(2:5)])
queue[1]<-"donkey"
print(queue)
print(queue[1:4])
print(queue[c("sheep","fox","ant","serpent")
```
print(queue[c("sheep","fox","ant","serpent"])
```
print(queue[c("sheep","fox","ant","serpent")]
```
print(queue[c("sheep","fox","ant","serpent"))]
print(queue[c("sheep","fox","ant","serpent")])
queue[c("sheep","fox","ant","serpent")]
queue
queue[1:4] <- c("sheep","fox","ant","serpent")
queue
queue <- c("sheep","fox","ant","serpent")
print(queue <- c("sheep","fox","ant","serpent"))
print(queue <- c("sheep","fox","aphid","ant","serpent"))
str(queue)
str(queue)[3]
str(queue)
Filter(function(i) { all(i %% c(2,3,7) != 0) },seq(100))
Filter(function(i) { all(i %% c(2,3,7) != 0) },
seq(100))
Filter(function(i) { all(i %% c(2,3,7) != 0) },
seq(100))
Filter(function(i) { all(i %% c(2,3,7) != 0) },
seq(100))
xy <- runif(2)
print(xy)
r <- sqrt(xy[1]^2 + xy[2]^2)
theta <- atan(xy[2]/xy[1]
```
theta <- atan(xy[2]/xy[1])
coordinates <- c(r,theta)
coordinates <- c(r,theta)
print(coordinates)
print(xy)
queue <- c("sheep", "fox", "owl", "ant")
queue[5] <- "serpent"
print(queue)
print(queue)
queue <- queue[-1]
print(queue)
queue <- queue[-1]
print(queue)
queue[5] <- "serpent"
print(queue)
queue <- c("sheep", "fox", "owl", "ant")
queue[5] <- "serpent"
print(queue)
queue <- queue[-1]
print(queue)
queue[1]<-"donkey"
print(queue)
queue <- c("donkey",queue)
print(queue)
queue <- c("sheep", "fox", "owl", "ant")
#the serpent arrives
queue[5] <- "serpent"
print(queue)
#the sheep enters the ark
queue <- queue[-1]
print(queue)
#the donkey arrives and talks his way to the front of the line
queue <- c("donkey",queue)
print(queue)
queue <- queue[-5]
print(queue)
queue <- queue[-3]
print(queue)
queue <- append(queue,"aphid",after=2)
print(queue)
which(queue=="aphid")
print(which(queue=="aphid"))
which(queue=="aphid")
x=1.1
a=2.2
b=3.3
z <- x^a^b
print(z)
z <- (x^a)^b
print(z)
z <- 3*x^3 + 2*x^2 + 1
print(z)
floor((z%%floor(z))*10)
z <- runif(1000)
numbers <- c(mean(z<0.10),mean(z>0.90),mean(z>0.45 & z<0.55))
print(numbers)
z <- log10(z)
numbers <- c(mean(z<0.10),mean(z>0.90),mean(z>0.45&z<0.55))
print(numbers)
numbers<-c(mean(z<0.10), mean(z>0.90), mean(z>0.45&z<0.55))
print(numbers)
z<-z^2
numbers<-c(mean(z<0.10), mean(z>0.90), mean(z>0.45&z<0.55))
print(numbers)
z<-exp(z)
numbers<-c(mean(z<0.10), mean(z>0.90), mean(z>0.45&z<0.55))
print(numbers)
z<-sqrt(z)
z <- sqrt(z)
numbers<-c(mean(z<0.10), mean(z>0.90), mean(z>0.45&z<0.55))
print(numbers)
z < -exp(z)
numbers <- c(mean(z<0.10), mean(z>0.90), mean(z>0.45&z<0.55))
print(numbers)
z<-z^2
z < -exp(z)
numbers <- c(mean(z<0.10), mean(z>0.90), mean(z>0.45&z<0.55))
print(numbers)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("thomasp85/patchwork")
3<4
3>5:7
3>5:7
3==4
3>5:7
3=4
3 !=4
i <- c(1,1:7)
print(i)
j <- 3:10
print(j)
union(i,j) #all of the elements
intersect(i,j) #common elements
setdiff(i,j) # uniquue elements of i not in j
setdiff(j,i) # uniquie elements of j not in i
setequal(i,j)
setequal(i,i)
is.element(i,j) #compare elements in i to j
is.element(j,i)
i %in% j # are elements in i also in j?
z <- 10:20
z < 15
z < 20 & z > 17
z < 20 & z > 17 # AND operator
z < 20 | z >17 # OR operator
library(ggplot2)
library(ggplot2)
m <- matrix(data=1:12,nrow = 4)
m
m <- matrix(data=1:12,nrow = 4,byrow = T)
m
dim(m)
dim(m) <- c(6, 2)
m
dim(m) <- c(4,3)
m
nrow(m)
ncol(m)
length(m)
rownames(m) <- c("a","b","c","d")
colnames(m) <- LETTERS[1:ncol(m)]
m
colnames(m) <- LETTERS[1:length(m)]
m
colnames(m) <- LETTERS[1:ncol(m)]
m
print(m[2,3])
print(m[3,3]) # will read row first, then column
print(m[2,3]) # will read row first, then column
print(m[2,]
print(m[2,])
print(m[2,])
m
print(m[,2])
print(m[c(1,4)],c(1,3)]
print(m[c(1,4)],c(1,3)])
print(m[c(1,4),c(1,3)])
rownames(m) <- paste("Species",LETTERS[1:nrow(m),sep"")
m
rownames(m) <- paste("Species",LETTERS[1:nrow(m)],sep"")
m
rownames(m) <- paste("Species",LETTERS[1:nrow(m)],sep="")
m
colnames(m) <- paste("Site",1:ncol(m),sep="")
m
dimnames(m) <- list(paste("Site",1:nrow(m),sep=0),paste("Species",ncol(m):1,sep=""))
dimnames(m) <- list(paste("Site",1:nrow(m),sep=""),paste("Species",ncol(m):1,sep=""))
m
t(m)
m2 <- t(m)
m2
m2 <- rbind(m2,c(10,20,30,40))
m2
rownames(m2)
rownames(m2)[4] <- Species X
rownames(m2)[4] <- "Species X"
m2
m2["Species X",c("Site3","Site4")]
myVec <- as.vector(m)
myVec
m
myList <- list(1:10,matrix(1:8,nrow=4,byrow = T), letters[1:3],pi)
myList
str(myList)
myList[4] - 3
myList[4]
str(myList[4])
myList[[4]]
myList[[2]]
myList[[2]][4,1]
myList2 <- list(Tester=F)
myList2 <- list(Tester=F,littleM=matrix(1:9,nrow = 3))
myList2$littleM[2,3] #get row 2, column 3
m
m[1]
