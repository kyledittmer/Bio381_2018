x <- 5 #preferred
print(x)
y=4 # legal but not used except in function
y=4 #legal but not used except in function
y=y+1.1
y<- y+1
plantHeight<- 5.5
source('~/Desktop/BIO 381/Bio381_2018/BasicCoding.R')
# Using the assignment operator
x <- 5 #preferred
print(x)
y=4 #legal but not used except in function
y=y+1.1
y<- y+1
plantHeight<- 5.5
z <- c(3,7,7,10) #simple atomic vector
print(z)
typeof(z) #get the varible type
str(z) #get the structure of the variable
is.numeric(z) #logican test for variable type
is.character(z)
z <- c(c(3,4),c(5,6))
print(c)
print(z)
print(z)
z<-c("perch","bass","trout","red snapper")
print(z)
z<-c("this is only 'one' character strong",'a second string')
str(z)
z<-c(TRUE,TRUE,FALSE)
is.numeric(z)
is.logical(z)
z<-c(1.1,2.2,3.2)
typeof(z)
is.numeric(z)
length(z)
names(z)
names(z)<-c("chow","pug","beagle","greyhound","akita")
print(z)
names(z)<- c("chow","pug","beagle","greyhound","akita")
z<- runif(5) #random uniform (0,1)
names(z)<- c("chow","pug","beagle","greyhound","akita")
print(z)
z2<-c(gold=3.3,silver=10,lead=2)
print(z2)
names(z2)
names(z2) <- NULL
print(z2)
names(z2)<- c("copper","zinc")
print(z2)
z<-c(3.2,3.3,NA)
length(z)
typeof(z[3])
mean(z)
is.na(z)
!is.na(z)
mean(!is.na(z))
mean(z[!is.na(z)])
z<-0/0
print(z)
z<-1/0
print(z)
z<--1/0
print(z)
z<--0/1 #OK
print(z)
z<-1/0
print(z)
z<-NULL
typeof(z)
length(z)
is.null(z)
a<-c(2.1,2.2)
typeof(a)
b<-c("purple","green")
typeof(b)
d<-c(a,b)
print(d)
typeof(d)
a<- runif(10)
print(a)
a > 0.5    #logical operation
a > 0.5    #logical operation
sum(temp)
temp<- a > 0.5 # hold these logical values
sum(temp)
mean(a>0.5)
mean(rnorm(1000)>2.0)
mean(rnorm(1000)>2.0)
mean(rnorm(10000)>2.0)
mean(rnorm(1000000)>2.0)
z<-c(10,20,30)
z+1
y<-c(1,2,3)
z+y #element-by-element matching
short<- c(1,2)
z+short # what happens?
z+short # what happens?
z^2
z<-vector(mode="numeric",length=0)
print(z)
print(z)
z<-c(z,5) #don't do this in your code
print(z)
z<- rep(0,100)
z[1]<-3.3
head(z)
z<-rep(NA,100)
head(z)
typeof(z)
z[2]<-c("Washington",2.2)
z<-rep(NA,100)
z[c(1,2)]<-c("Washington",2.2)
typeof(z)
z
MyVector <- runif(100) # gt 100 random uniform values
myNames <- paste("File",seq(1:length(MyVector)),".txt",sep="")
head(myNames)
names(MyVector) <- myNames
head(MyVector)
rep("mystring",3)
rep(x=0.5,times=6)
rep(times=6,x=0.5)
myVec <- c(1,2,3)
rep(myVec,times=2)
rep(x=myVec,each=2)
rep(x=myVec,each=MyVec)
myVec <- c(1,2,3)
rep(x=myVec,each=myVec)
rep(x=myVec,times=myVec)
rep(x=1:3,times=3:1)
seq(from=2,to=4)
seq(from=2,to=4,by=0.5)
seq(from=2,to=4,length=7)
x <- seq(from=2,to=4,length=7)
1:x
1:length(x)
seq_along(x)
1:5
seq(1:5)
seq_len(10)
x<-vector(mode="numeric",length=0)
str(x)
1:length(x)
seq_along(x)
runif(1)
set.seed(100)
runif(1)
runif(n=5,min=100,max=200)
runif(n=5,min=100,max=200)
library(ggplot2)
z<-runif(1000)
print(z)
qplot(x=z)
z<-runif(10000000)
qplot(x=z)
z<-runif(1000)
qplot(x=z)
z<-runif(1000,min=30,max=300)
qplot(x=z)
z <- rnorm(1000)
qplot(x=z)
plot(x=z)
qplot(x=z)
z<- rnorm(n=1000,mean=30,std=20)
qplot(x=z)
longVec<- seq_len(10)
longVec
sample(x=longVec)
sample(x=longVec,size=3)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
sample(x=longVec,size=3,replace = TRUE)
myWeights<- c(rep(20,5),rep(100,5))
myWeights
sample(x=longvec,replace=T,prob = myWeights)
sample(x=longVec,replace=T,prob = myWeights)
sample(x=longVec,replace=F,prob = myWeights)
z<-c(3.1,9.2,1.3,0.4,7.5)
z[2]
z[(2,3)]
z[c(2,3)]
z(2:3)
z[2:3]
z[-c(2,3)]
z<3
z[z<3]
which(z<3)
myCriteria<-z<3
z[myCriteria]
z[which(z>3)]
z[which(z<3)]
zx<-c(NA,z)
zx
zx[zx<3] #missing values dropped
zx[which(zx<3)]
z[]
z[-(length(z):(length(z)-2))]
length(z[1:2])
z[1:2]
z
names(z)<- letters[seq_along(z)
names(z)<- letters[seq_along(z)]
names(z) <- letters[seq_along(z)]
z
z[c("b","d","e")]
z[2:4]
q<- seq_len(100)
q[q%%9==0]
